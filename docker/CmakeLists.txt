cmake_minimum_required(VERSION 3.11 FATAL_ERROR)

project(
  dependencies
  LANGUAGES CXX
  VERSION 0.0.1)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "-O2")

set(CMAKE_BUILD_TYPE
    Release
    CACHE STRING "Build type" FORCE)

include(GNUInstallDirs)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

set(INSTALL_LIBDIR
    ${CMAKE_INSTALL_LIBDIR}
    CACHE PATH "directory for libraries")
set(INSTALL_BINDIR
    ${CMAKE_INSTALL_BINDIR}
    CACHE PATH "directory for executables")
set(INSTALL_INCLUDEDIR
    ${CMAKE_INSTALL_INCLUDEDIR}
    CACHE PATH "directory for header files")

set(DEF_INSTALL_CMAKEDIR share/cmake/${PROJECT_NAME})
set(INSTALL_CMAKEDIR
    ${DEF_INSTALL_CMAKEDIR}
    CACHE PATH "directory for CMake files")

set(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage)
message(STATUS "${PROJECT_NAME} staged install: ${STAGED_INSTALL_PREFIX}")

set_property(DIRECTORY PROPERTY EP_BASE ${CMAKE_BINARY_DIR}/subs)

find_package(OpenSSL REQUIRED)
message("OpenSSL include dir: ${OPENSSL_INCLUDE_DIR}")
message("OpenSSL libraries: ${OPENSSL_LIBRARIES}")

set(GRPC_GIT_TAG
    "v1.43.2"
    CACHE STRING "gRPC version")
set(PROTOBUF_GIT_TAG
    "v3.19.4"
    CACHE STRING "protobuf version")
set(OTEL_CPP_GIT_TAG
    "v1.3.0"
    CACHE STRING "OpenTelemetry-cpp version")

include(ExternalProject)
ExternalProject_Add(protobuf
  GIT_REPOSITORY https://github.com/protocolbuffers/protobuf.git
  GIT_TAG 22d0e265de7d2b3d2e9a00d071313502e7d4cccf
  SOURCE_SUBDIR cmake
  GIT_SHALLOW 1
  UPDATE_COMMAND ""
  CMAKE_ARGS -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
             -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE
             -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
             -Dprotobuf_BUILD_TESTS:BOOL=OFF
             -Dprotobuf_WITH_ZLIB:BOOL=OFF
             -Dprotobuf_MSVC_STATIC_RUNTIME:BOOL=OFF
             -DCMAKE_INSTALL_PREFIX:PATH=${STAGED_INSTALL_PREFIX}
  CMAKE_CACHE_ARGS -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
  TEST_AFTER_INSTALL 0
  DOWNLOAD_NO_PROGRESS 1
  LOG_CONFIGURE 1
  LOG_BUILD 0
  LOG_INSTALL 1)

set(DEF_Protobuf_DIR ${STAGED_INSTALL_PREFIX}/lib/cmake/protobuf)
file(TO_NATIVE_PATH "${DEF_Protobuf_DIR}" DEF_Protobuf_DIR)
set(Protobuf_DIR ${DEF_Protobuf_DIR}
  CACHE PATH "Path to internally built protobufConfig.cmake" FORCE)

ExternalProject_Add(gRPC
  GIT_REPOSITORY https://github.com/grpc/grpc.git
  GIT_TAG ${GRPC_GIT_TAG}
  GIT_SHALLOW 1
  UPDATE_COMMAND ""
  DEPENDS protobuf
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}
             -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE
             -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
             -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
             -DgRPC_SSL_PROVIDER=package
             -DOPENSSL_ROOT_DIR=OpenSSL
             -DgRPC_BUILD_TESTS:BOOL=OFF
             -DgRPC_INSTALL:BOOL=ON
             -DBUILD_SHARED_LIBS=ON
             -DgRPC_PROTOBUF_PROVIDER:STRING=package
             -DgRPC_PROTOBUF_PACKAGE_TYPE:STRING=CONFIG
             -DProtobuf_DIR:PATH=${STAGED_INSTALL_PREFIX}/lib/cmake/protobuf
             -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF
             -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF
             -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF
             -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF
             -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF
             -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF
             -Dprotobuf_BUILD_LIBPROTOC=ON
  CMAKE_CACHE_ARGS -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
  TEST_AFTER_INSTALL 0
  DOWNLOAD_NO_PROGRESS 1
  LOG_CONFIGURE 1
  LOG_BUILD 0
  LOG_INSTALL 1)

set(DEF_grpc_DIR ${STAGED_INSTALL_PREFIX}/lib/cmake/grpc)
file(TO_NATIVE_PATH "${DEF_grpc_DIR}" DEF_grpc_DIR)
set(grpc_DIR ${DEF_grpc_DIR}
  CACHE PATH "Path to internally built grpcConfig.cmake" FORCE)

set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${STAGED_INSTALL_PREFIX}/lib/)
set(LD_LIBRARY_PATH_v "${STAGED_INSTALL_PREFIX}/lib")

link_directories(${STAGED_INSTALL_PREFIX}/lib/)
set(CMAKE_INSTALL_RPATH "${STAGED_INSTALL_PREFIX}/lib")

ExternalProject_Add(opentelemetry
  DEPENDS gRPC
  GIT_REPOSITORY https://github.com/open-telemetry/opentelemetry-cpp.git
  GIT_TAG ${OTEL_CPP_GIT_TAG}
  GIT_SHALLOW 1
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}
             -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
             -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE
             -DWITH_ZIPKIN=OFF
             -DWITH_JAEGER=OFF
             -DWITH_EXAMPLES=OFF
             -DBUILD_TESTING=OFF
             -DWITH_OTLP=ON
             -DWITH_OTLP_GRPC=ON
             -DWITH_OTLP_HTTP=OFF
             -DBUILD_SHARED_LIBS=ON
             -DWITH_LOGS_PREVIEW=OFF
             -DWITH_ABSEIL=ON
             -DProtobuf_PROTOC_EXECUTABLE=${STAGED_INSTALL_PREFIX}/bin/protoc
             -DCMAKE_PREFIX_PATH=${STAGED_INSTALL_PREFIX}/lib/cmake
  CMAKE_CACHE_ARGS -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
  TEST_AFTER_INSTALL 0
  DOWNLOAD_NO_PROGRESS 1
  LOG_CONFIGURE 1
  LOG_BUILD 0
  LOG_INSTALL 1)

install(
  DIRECTORY ${STAGED_INSTALL_PREFIX}/
  DESTINATION .
  USE_SOURCE_PERMISSIONS)
